# BetterInventory v1.0 | Grow A Garden
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local CalculatePetValue = require(ReplicatedStorage.Modules:WaitForChild("CalculatePetValue"))
local CalculatePlantValue = require(ReplicatedStorage.Modules:WaitForChild("CalculatePlantValue"))
local DataService = require(ReplicatedStorage.Modules.DataService)

local function formatNumber(n)
    if not n or type(n) ~= "number" then return "$0" end
    local sign = (n < 0) and "-" or ""
    local absn = math.abs(n)
    local suffix = ""
    if absn >= 1e12 then
        n = n/1e12; suffix = "T"
    elseif absn >= 1e9 then
        n = n/1e9; suffix = "B"
    elseif absn >= 1e6 then
        n = n/1e6; suffix = "M"
    elseif absn >= 1e3 then
        n = n/1e3; suffix = "K"
    end
    local i = math.floor(math.abs(n))
    local f = math.abs(n) - i
    local frac = (f > 0) and ("%.1f"):format(f):sub(2) or ""
    local s = tostring(i)
    while true do
        local count
        s, count = s:gsub("^(-?%d+)(%d%d%d)", "%1,%2")
        if count == 0 then break end
    end
    return "$" .. sign .. s .. frac .. suffix
end

local playerGui = player:WaitForChild("PlayerGui")

local existingGui = playerGui:FindFirstChild("InventoryPriceGui")
if existingGui then
    existingGui:Destroy()
end

local currentSortColumn = "Price"
local currentSortDir = "desc"
local allItemsData = {}
local isMinimized = false 
local originalSize
local sortButtons = {}
local isRefreshing = false
local lastRefreshTime = 0

local inventoryGui = Instance.new("ScreenGui")
inventoryGui.Name = "InventoryPriceGui"
inventoryGui.ResetOnSpawn = false
inventoryGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 500, 0, 400)
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -200)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BackgroundTransparency = 0.1
mainFrame.Parent = inventoryGui
mainFrame.Active = true

originalSize = mainFrame.Size

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 8)
mainCorner.Parent = mainFrame

local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

local bottomFrame = Instance.new("Frame")
bottomFrame.Size = UDim2.new(1, 0, 0.5, 0)
bottomFrame.Position = UDim2.new(0, 0, 0.5, 0)
bottomFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
bottomFrame.BorderSizePixel = 0
bottomFrame.Parent = titleBar

local titleText = Instance.new("TextLabel")
titleText.Name = "Title"
titleText.Size = UDim2.new(1, -100, 1, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "Inventory Items & Prices"
titleText.Font = Enum.Font.SourceSansBold
titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
titleText.TextSize = 18
titleText.Parent = titleBar

local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -30, 0, 0)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 18
closeButton.Font = Enum.Font.SourceSansBold
closeButton.Parent = titleBar

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 6)
closeCorner.Parent = closeButton

local minimizeButton = Instance.new("TextButton")
minimizeButton.Name = "MinimizeButton"
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -65, 0, 0)
minimizeButton.BackgroundColor3 = Color3.fromRGB(60, 60, 200)
minimizeButton.Text = "-"
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.TextSize = 22
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.Parent = titleBar

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 6)
minimizeCorner.Parent = minimizeButton

local refreshButton = Instance.new("TextButton")
refreshButton.Name = "RefreshButton"
refreshButton.Size = UDim2.new(0, 100, 0, 25)
refreshButton.Position = UDim2.new(0, 10, 0, 3)
refreshButton.BackgroundColor3 = Color3.fromRGB(60, 120, 60)
refreshButton.Text = "Refresh"
refreshButton.TextColor3 = Color3.fromRGB(255, 255, 255)
refreshButton.TextSize = 16
refreshButton.Font = Enum.Font.SourceSansBold
refreshButton.Parent = titleBar

local refreshCorner = Instance.new("UICorner")
refreshCorner.CornerRadius = UDim.new(0, 4)
refreshCorner.Parent = refreshButton

local giftPlayerFrame = Instance.new("Frame")
giftPlayerFrame.Name = "GiftPlayerFrame"
giftPlayerFrame.Size = UDim2.new(0, 200, 0, 25)
giftPlayerFrame.Position = UDim2.new(0, 120, 0, 3)
giftPlayerFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
giftPlayerFrame.BackgroundTransparency = 0.3
giftPlayerFrame.Parent = titleBar

local giftPlayerCorner = Instance.new("UICorner")
giftPlayerCorner.CornerRadius = UDim.new(0, 4)
giftPlayerCorner.Parent = giftPlayerFrame

local giftPlayerInput = Instance.new("TextBox")
giftPlayerInput.Name = "GiftPlayerInput"
giftPlayerInput.Size = UDim2.new(1, -10, 1, -6)
giftPlayerInput.Position = UDim2.new(0, 5, 0, 3)
giftPlayerInput.BackgroundTransparency = 1
giftPlayerInput.Text = ""
giftPlayerInput.PlaceholderText = "Enter player name to gift"
giftPlayerInput.TextColor3 = Color3.fromRGB(255, 255, 255)
giftPlayerInput.TextSize = 14
giftPlayerInput.Font = Enum.Font.SourceSans
giftPlayerInput.Parent = giftPlayerFrame

local debugButton = Instance.new("TextButton")
debugButton.Name = "DebugButton"
debugButton.Size = UDim2.new(0, 100, 0, 25)
debugButton.Position = UDim2.new(0, 330, 0, 3)
debugButton.BackgroundColor3 = Color3.fromRGB(80, 80, 150)
debugButton.Text = "Debug"
debugButton.TextColor3 = Color3.fromRGB(255, 255, 255)
debugButton.TextSize = 14
debugButton.Font = Enum.Font.SourceSansBold
debugButton.Parent = titleBar

local debugCorner = Instance.new("UICorner")
debugCorner.CornerRadius = UDim.new(0, 4)
debugCorner.Parent = debugButton

local noticeLabel = Instance.new("TextLabel")
noticeLabel.Size = UDim2.new(0, 300, 0, 20)
noticeLabel.Position = UDim2.new(1, -310, 0, 5)
noticeLabel.BackgroundTransparency = 1
noticeLabel.Font = Enum.Font.SourceSansItalic
noticeLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
noticeLabel.TextSize = 12
noticeLabel.Text = "Auto-teleport gifting requires a script executor"
noticeLabel.TextXAlignment = Enum.TextXAlignment.Right
noticeLabel.Parent = titleBar

local resizeHandle = Instance.new("Frame")
resizeHandle.Name = "ResizeHandle"
resizeHandle.Size = UDim2.new(0, 20, 0, 20)
resizeHandle.Position = UDim2.new(1, -20, 1, -20)
resizeHandle.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
resizeHandle.BackgroundTransparency = 0.5
resizeHandle.Parent = mainFrame
resizeHandle.ZIndex = 10

local resizeTexture = Instance.new("TextLabel")
resizeTexture.Name = "ResizeTexture"
resizeTexture.Size = UDim2.new(1, 0, 1, 0)
resizeTexture.BackgroundTransparency = 1
resizeTexture.Text = "â‡²"
resizeTexture.TextColor3 = Color3.fromRGB(200, 200, 200)
resizeTexture.TextSize = 16
resizeTexture.Font = Enum.Font.SourceSansBold
resizeTexture.Parent = resizeHandle

local headerFrame = Instance.new("Frame")
headerFrame.Name = "HeaderFrame"
headerFrame.Size = UDim2.new(1, -20, 0, 35)
headerFrame.Position = UDim2.new(0, 10, 0, 40)
headerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
headerFrame.BackgroundTransparency = 0.5
headerFrame.Parent = mainFrame

local headerCorner = Instance.new("UICorner")
headerCorner.CornerRadius = UDim.new(0, 6)
headerCorner.Parent = headerFrame

local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Name = "ScrollingFrame"
scrollingFrame.Size = UDim2.new(1, -20, 1, -105)
scrollingFrame.Position = UDim2.new(0, 10, 0, 85)
scrollingFrame.BackgroundTransparency = 0.9
scrollingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.Parent = mainFrame

local totalFrame = Instance.new("Frame")
totalFrame.Name = "TotalFrame"
totalFrame.Size = UDim2.new(1, -20, 0, 30)
totalFrame.Position = UDim2.new(0, 10, 1, -40)
totalFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
totalFrame.BackgroundTransparency = 0.5
totalFrame.Parent = mainFrame

local totalCorner = Instance.new("UICorner")
totalCorner.CornerRadius = UDim.new(0, 6)
totalCorner.Parent = totalFrame

local totalLabel = Instance.new("TextLabel")
totalLabel.Name = "TotalLabel"
totalLabel.Size = UDim2.new(0.5, 0, 1, 0)
totalLabel.BackgroundTransparency = 1
totalLabel.Font = Enum.Font.SourceSansBold
totalLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
totalLabel.TextSize = 18
totalLabel.Text = "Total Value:"
totalLabel.TextXAlignment = Enum.TextXAlignment.Left
totalLabel.Position = UDim2.new(0, 10, 0, 0)
totalLabel.Parent = totalFrame

local totalValueLabel = Instance.new("TextLabel")
totalValueLabel.Name = "TotalValueLabel"
totalValueLabel.Size = UDim2.new(0.5, 0, 1, 0)
totalValueLabel.Position = UDim2.new(0.5, 0, 0, 0)
totalValueLabel.BackgroundTransparency = 1
totalValueLabel.Font = Enum.Font.SourceSansBold
totalValueLabel.TextColor3 = Color3.fromRGB(255, 255, 100)
totalValueLabel.TextSize = 18
totalValueLabel.Text = "$0"
totalValueLabel.TextXAlignment = Enum.TextXAlignment.Right
totalValueLabel.Position = UDim2.new(0.5, -10, 0, 0)
totalValueLabel.Parent = totalFrame

local columns = {"Item Name", "Type", "Variant", "Mutations", "Weight (kg)", "Price", "Favorited", "Gift"}
local columnWidths = {0.24, 0.08, 0.1, 0.17, 0.1, 0.15, 0.08, 0.08}

local currentX = 0
for i, columnName in ipairs(columns) do
    local headerContainer = Instance.new("Frame")
    headerContainer.Name = columnName:gsub(" ", "") .. "HeaderContainer"
    headerContainer.Size = UDim2.new(columnWidths[i], 0, 1, 0)
    headerContainer.Position = UDim2.new(currentX, 0, 0, 0)
    headerContainer.BackgroundTransparency = 1
    headerContainer.Parent = headerFrame
    
    local columnHeader = Instance.new("TextLabel")
    columnHeader.Name = columnName:gsub(" ", "") .. "Header"
    columnHeader.Size = UDim2.new(1, -25, 1, 0)
    columnHeader.Position = UDim2.new(0, 5, 0, 0)
    columnHeader.BackgroundTransparency = 1
    columnHeader.Font = Enum.Font.SourceSansBold
    columnHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
    columnHeader.TextSize = 18
    columnHeader.Text = columnName
    columnHeader.TextXAlignment = Enum.TextXAlignment.Left
    columnHeader.Parent = headerContainer
    
    if i < 8 then
    local sortButton = Instance.new("TextButton")
    sortButton.Name = "SortButton"
    sortButton.Size = UDim2.new(0, 20, 0, 20)
    sortButton.Position = UDim2.new(1, -25, 0.5, -10)
    sortButton.BackgroundTransparency = 0.8
    sortButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    sortButton.Text = columnName == currentSortColumn and (currentSortDir == "asc" and "â–²" or "â–¼") or "â—†"
    sortButton.TextColor3 = columnName == currentSortColumn 
                         and Color3.fromRGB(255, 255, 100) 
                         or Color3.fromRGB(150, 150, 150)
    sortButton.TextSize = 14
    sortButton.Font = Enum.Font.SourceSansBold
    sortButton.Parent = headerContainer
    
    local sortCorner = Instance.new("UICorner")
    sortCorner.CornerRadius = UDim.new(0, 4)
    sortCorner.Parent = sortButton
    
    sortButtons[columnName] = sortButton
    end
    
    currentX = currentX + columnWidths[i]
end

local function toggleMinimize()
    isMinimized = not isMinimized
    
    if isMinimized then
        originalSize = mainFrame.Size
        
        mainFrame.Size = UDim2.new(0, 300, 0, 30)
        minimizeButton.Text = "+"
        
        if mainFrame:FindFirstChild("HeaderFrame") then
            mainFrame.HeaderFrame.Visible = false
        end
        if mainFrame:FindFirstChild("ScrollingFrame") then
            mainFrame.ScrollingFrame.Visible = false
        end
        if mainFrame:FindFirstChild("TotalFrame") then
            mainFrame.TotalFrame.Visible = false
        end
        if mainFrame:FindFirstChild("ResizeHandle") then
            mainFrame.ResizeHandle.Visible = false
        end
    else
        mainFrame.Size = originalSize
        minimizeButton.Text = "-"
        
        if mainFrame:FindFirstChild("HeaderFrame") then
            mainFrame.HeaderFrame.Visible = true
        end
        if mainFrame:FindFirstChild("ScrollingFrame") then
            mainFrame.ScrollingFrame.Visible = true
        end
        if mainFrame:FindFirstChild("TotalFrame") then
            mainFrame.TotalFrame.Visible = true
        end
        if mainFrame:FindFirstChild("ResizeHandle") then
            mainFrame.ResizeHandle.Visible = true
        end
    end
end

minimizeButton.MouseButton1Click:Connect(toggleMinimize)

local dragging = false
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    if dragging then
        local delta = input.Position - dragStart
        local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                   startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        
        RunService.RenderStepped:Wait()
        mainFrame.Position = position
    end
end

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or
       input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

titleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or
       input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)

local resizing = false
local resizeStart
local startSize

resizeHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or
       input.UserInputType == Enum.UserInputType.Touch then
        resizing = true
        resizeStart = input.Position
        startSize = mainFrame.Size
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                resizing = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or
                    input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - resizeStart
        local newWidth = math.max(400, startSize.X.Offset + delta.X)
        local newHeight = math.max(300, startSize.Y.Offset + delta.Y)
        
        mainFrame.Size = UDim2.new(0, newWidth, 0, newHeight)
        originalSize = mainFrame.Size
        
        if scrollingFrame then
            scrollingFrame.Size = UDim2.new(1, -20, 1, -105)
        end
    end
end)

closeButton.MouseButton1Click:Connect(function()
    inventoryGui:Destroy()
end)

local function giftWithTeleport(tool, targetPlayerName)
    if not tool or targetPlayerName == "" then
        return false
    end
    
    local targetPlayer = nil
    for _, plr in pairs(game.Players:GetPlayers()) do
        if plr.Name:lower() == targetPlayerName:lower() then
            targetPlayer = plr
            break
        end
    end
    
    if not targetPlayer then
        return false, "Player not found"
    end
    
    local character = player.Character
    local targetCharacter = targetPlayer.Character
    local isGifting = true
    local giftSuccess = false
    local maxAttempts = 20
    local attempts = 0
    local startTime = tick()
    
    if tool.Parent ~= character then
        tool.Parent = character
        task.wait(0.1)
    end
    
    spawn(function()
        while isGifting and attempts < maxAttempts and tick() - startTime < 10 do
            attempts = attempts + 1
            
            if character and targetCharacter and character.PrimaryPart and targetCharacter.PrimaryPart then
                pcall(function()
                    local origPos = character.PrimaryPart.CFrame
                    character:SetPrimaryPartCFrame(
                        targetCharacter.PrimaryPart.CFrame * 
                        CFrame.new(0, 0, 2)
                    )
                    
                    task.wait(0.1)
                    
                    local hrp = targetCharacter:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        for _, obj in pairs(hrp:GetChildren()) do
                            if obj:IsA("ProximityPrompt") and obj.Enabled then
                                fireproximityprompt(obj)
                                task.wait(0.05)
                                pcall(function() obj:InputHoldBegin() end)
                                task.wait(0.05)
                                pcall(function() obj:InputHoldEnd() end)
                                task.wait(0.05)
                            end
                        end
                    end
                    
                    task.wait(0.2)
                    pcall(function() character:SetPrimaryPartCFrame(origPos) end)
                end)
            end
            
            pcall(function()
                local gameEvents = ReplicatedStorage:FindFirstChild("GameEvents")
                if gameEvents then
                    local remotes = {
                        gameEvents:FindFirstChild("FriendGiftEvent"),
                        gameEvents:FindFirstChild("RemoteEvent"),
                        gameEvents:FindFirstChild("PetGiftingService"),
                        gameEvents:FindFirstChild("SeedPackGiverEvent")
                    }
                    
                    for _, remote in pairs(remotes) do
                        if remote then
                            remote:FireServer(tool, targetPlayer)
                            remote:FireServer("GiveItem", targetPlayer, tool)
                            remote:FireServer(targetPlayer, tool)
                            remote:FireServer(tool)
                        end
                    end
                end
            end)
            
            if not tool:IsDescendantOf(game) then
                giftSuccess = true
                isGifting = false
                break
            end
            
            task.wait(0.3)
        end
        
        isGifting = false
    end)
    
    return true, "Attempting to bypass proximity limit..."
end

local function findPotentialGiftRemotes()
    local remotes = {}
    
    for _, instance in pairs(ReplicatedStorage:GetDescendants()) do
        if instance:IsA("RemoteEvent") or instance:IsA("RemoteFunction") then
            table.insert(remotes, instance:GetFullName())
        end
    end
    
    return remotes
end

debugButton.MouseButton1Click:Connect(function()
    local remotes = findPotentialGiftRemotes()
    print("=== POTENTIAL GIFT REMOTES ===")
    for i, remotePath in ipairs(remotes) do
        if remotePath:lower():find("gift") or remotePath:lower():find("trade") or 
           remotePath:lower():find("item") or remotePath:lower():find("give") then
            print(i, remotePath, "(LIKELY)")
        else
            print(i, remotePath)
        end
    end
    print("Total remotes found:", #remotes)
    print("=== END OF REMOTES LIST ===")
end)

local createSortedItemList

local function refreshInventoryList()
    if isRefreshing then return end
    isRefreshing = true
    
    local currentTime = tick()
    if currentTime - lastRefreshTime < 5 then
        isRefreshing = false
        return
    end
    lastRefreshTime = currentTime
    
    refreshButton.Text = "Refreshing..."
    refreshButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    
    allItemsData = {}
    
    local success, playerData = pcall(function()
        return DataService:GetData()
    end)
    
    if not success or not playerData or not playerData.InventoryData then
        local errorLabel = Instance.new("TextLabel")
        errorLabel.Size = UDim2.new(1, 0, 0, 30)
        errorLabel.Position = UDim2.new(0, 0, 0, 0)
        errorLabel.BackgroundTransparency = 1
        errorLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        errorLabel.Text = "Inventory data not found!"
        errorLabel.Font = Enum.Font.SourceSansSemibold
        errorLabel.TextSize = 18
        errorLabel.Parent = scrollingFrame
        
        refreshButton.Text = "Refresh"
        refreshButton.BackgroundColor3 = Color3.fromRGB(60, 120, 60)
        isRefreshing = false
        return
    end
    
    local totalValue = 0
    
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    local tools = {}
    
    if backpack then
        for _, tool in pairs(backpack:GetChildren()) do
            if tool:IsA("Tool") then
                table.insert(tools, tool)
            end
        end
    end
    
    if character then
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA("Tool") then
                table.insert(tools, tool)
            end
        end
    end
    
    for _, tool in pairs(tools) do
        if tool:GetAttribute("ItemType") == "Holdable" or tool:GetAttribute("ItemType") == "Pet" then
            local itemName = tool.Name
            local itemType = tool:GetAttribute("ItemType") or "Unknown"
            
            local uuid = tool:GetAttribute("ITEM_UUID")
            if not uuid then continue end
            
            local itemData = playerData.InventoryData[uuid]
            if not itemData or not itemData.ItemData then continue end
            
            local variant = "Normal"
            if itemData.ItemData.Variant then
                variant = itemData.ItemData.Variant
            end
            
            local mutations = "None"
            if itemData.ItemData.MutationString and itemData.ItemData.MutationString ~= "" then
                mutations = itemData.ItemData.MutationString
            end
            
            local weight = 0
            local weightDisplay = "0.00"
            
            if itemType == "Pet" then
                local weightStr = itemName:match("(%d+%.?%d*)%s*KG")
                if weightStr then
                    weight = tonumber(weightStr) or 0
                    weightDisplay = string.format("%.2f", weight)
                end
            else
                if tool:GetAttribute("Weight") then
                    weight = tool:GetAttribute("Weight")
                elseif tool:FindFirstChild("Weight") and tool.Weight:IsA("NumberValue") then
                    weight = tool.Weight.Value
                else
                    local weightStr = itemName:match("(%d+%.?%d*)%s*[Kk][Gg]")
                    if weightStr then
                        weight = tonumber(weightStr) or 0
                    end
                end
                weightDisplay = string.format("%.2f", weight)
            end
            
            local price = 0
            pcall(function()
                if itemType == "Pet" then
                    price = CalculatePetValue(tool)
                else
                    price = CalculatePlantValue(tool)
                end
            end)
            
            totalValue = totalValue + price
            
            local isFavorited = false
            if (itemData.ItemData.IsFavorite and itemData.ItemData.IsFavorite == true) or 
               (tool:GetAttribute("IsFavorite") and tool:GetAttribute("IsFavorite") == true) or 
               (tool:GetAttribute("Favorite") and tool:GetAttribute("Favorite") == true) then
                isFavorited = true
            end
            
            table.insert(allItemsData, {
                name = itemName:gsub("%s*%[.*%]", ""):gsub("%s*%d+%.?%d*%s*KG", ""):gsub("Age%s*%d+", ""):gsub("%s+$", ""),
                fullName = itemName,
                type = itemType,
                variant = variant,
                mutations = mutations,
                weight = weightDisplay,
                weightNum = weight,
                price = price,
                formattedPrice = formatNumber(price),
                uuid = uuid,
                isFavorited = isFavorited,
                tool = tool
            })
        end
    end
    
    totalValueLabel.Text = formatNumber(totalValue)
    
    createSortedItemList()
    
    refreshButton.Text = "Refresh"
    refreshButton.BackgroundColor3 = Color3.fromRGB(60, 120, 60)
    isRefreshing = false
end

createSortedItemList = function()
    for _, child in pairs(scrollingFrame:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
    
    table.sort(allItemsData, function(a, b)
        local aValue, bValue
        
        if currentSortColumn == "Item Name" then
            aValue = a.name:lower()
            bValue = b.name:lower()
            
        elseif currentSortColumn == "Type" then
            aValue = a.type:lower()
            bValue = b.type:lower()
            
        elseif currentSortColumn == "Variant" then
            local variantPriority = {
                ["Rainbow"] = 3,
                ["Gold"] = 2,
                ["Normal"] = 1
            }
            aValue = variantPriority[a.variant] or 0
            bValue = variantPriority[b.variant] or 0
            
        elseif currentSortColumn == "Mutations" then
            local function countMutations(mutStr)
                if mutStr == "None" then return 0 end
                local count = 0
                for mutation in mutStr:gmatch("[^,]+") do
                    count = count + 1
                end
                return count
            end
            aValue = countMutations(a.mutations)
            bValue = countMutations(b.mutations)
            
        elseif currentSortColumn == "Weight (kg)" then
            aValue = a.weightNum or 0
            bValue = b.weightNum or 0
            
        elseif currentSortColumn == "Price" then
            aValue = a.price or 0
            bValue = b.price or 0
            
        elseif currentSortColumn == "Favorited" then
            aValue = a.isFavorited and 1 or 0
            bValue = b.isFavorited and 1 or 0
        else
            return false
        end
        
        if currentSortDir == "asc" then
            return aValue < bValue
        else
            return aValue > bValue
        end
    end)
    
    for colName, button in pairs(sortButtons) do
        if colName == currentSortColumn then
            button.Text = currentSortDir == "asc" and "â–²" or "â–¼"
            button.TextColor3 = Color3.fromRGB(255, 255, 100)
        else
            button.Text = "â—†"
            button.TextColor3 = Color3.fromRGB(150, 150, 150)
        end
    end
    
    local rowHeight = 30
    for i, itemData in ipairs(allItemsData) do
        local rowFrame = Instance.new("Frame")
        rowFrame.Name = "Row_" .. i
        rowFrame.Size = UDim2.new(1, 0, 0, rowHeight)
        rowFrame.Position = UDim2.new(0, 0, 0, (i-1) * rowHeight)
        rowFrame.BackgroundColor3 = i % 2 == 0 and Color3.fromRGB(40, 40, 40) or Color3.fromRGB(35, 35, 35)
        rowFrame.BackgroundTransparency = 0.3
        rowFrame.Parent = scrollingFrame
        
        local currentX = 0
        local columnValues = {
            itemData.name, 
            itemData.type, 
            itemData.variant, 
            itemData.mutations, 
            itemData.weight, 
            itemData.formattedPrice, 
            itemData.isFavorited and "Yes" or "No",
            ""
        }
        
        for j, columnValue in ipairs(columnValues) do
            if j < 8 then
            local cell = Instance.new("TextLabel")
            cell.Name = "Column" .. j
            cell.Size = UDim2.new(columnWidths[j], -10, 1, 0)
            cell.Position = UDim2.new(currentX, 5, 0, 0)
            cell.BackgroundTransparency = 1
            cell.Font = Enum.Font.SourceSans
            
            if j == 3 then
                if columnValue == "Rainbow" then
                    cell.TextColor3 = Color3.fromRGB(255, 100, 255)
                elseif columnValue == "Gold" then
                    cell.TextColor3 = Color3.fromRGB(255, 215, 0)
                else
                    cell.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
            elseif j == 4 then
                if columnValue ~= "None" then
                    cell.TextColor3 = Color3.fromRGB(100, 255, 100)
                else
                    cell.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
            elseif j == 6 then
                cell.TextColor3 = Color3.fromRGB(255, 255, 100)
            elseif j == 7 then
                cell.TextColor3 = columnValue == "Yes" and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(255, 255, 255)
            else
                cell.TextColor3 = Color3.fromRGB(255, 255, 255)
            end
            
            cell.TextSize = 16
            cell.Text = tostring(columnValue)
            cell.TextXAlignment = Enum.TextXAlignment.Left
            cell.TextWrapped = true
            cell.Parent = rowFrame
            else
                local giftButton = Instance.new("TextButton")
                giftButton.Name = "GiftButton"
                giftButton.Size = UDim2.new(columnWidths[j], -10, 0, 22)
                giftButton.Position = UDim2.new(currentX, 5, 0.5, -11)
                giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                giftButton.Text = "Gift"
                giftButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                giftButton.TextSize = 14
                giftButton.Font = Enum.Font.SourceSansBold
                giftButton.Parent = rowFrame
                
                local giftCorner = Instance.new("UICorner")
                giftCorner.CornerRadius = UDim.new(0, 4)
                giftCorner.Parent = giftButton
                
                giftButton.MouseButton1Click:Connect(function()
                    local targetPlayer = giftPlayerInput.Text
                    
                    if targetPlayer == "" then
                        giftButton.Text = "No User!"
                        giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 60)
                        
                        task.delay(2, function()
                            giftButton.Text = "Gift"
                            giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                        end)
                        return
                    end
                    
                    giftButton.Text = "Sending..."
                    giftButton.BackgroundColor3 = Color3.fromRGB(100, 100, 150)
                    
                    local success, message = giftWithTeleport(itemData.tool, targetPlayer)
                    
                    if success then
                        local checkInterval = 0.5
                        local maxChecks = 20
                        local checks = 0
                        
                        local checkSuccess = function()
                            checks = checks + 1
                            
                            if not itemData.tool:IsDescendantOf(game) then
                                giftButton.Text = "Sent!"
                                giftButton.BackgroundColor3 = Color3.fromRGB(60, 150, 60)
                                
                                task.delay(2, function()
                                    giftButton.Text = "Gift"
                                    giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                                    refreshInventoryList()
                                end)
                                return
                            end
                            
                            if checks >= maxChecks then
                                giftButton.Text = "Failed!"
                                giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 60)
                                
                                task.delay(2, function()
                                    giftButton.Text = "Gift"
                                    giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                                end)
                                return
                            end
                            
                            task.spawn(function()
                                task.wait(checkInterval)
                                checkSuccess()
                            end)
                        end
                        
                        checkSuccess()
                    else
                        giftButton.Text = "Failed!"
                        giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 60)
                        
                        task.delay(2, function()
                            giftButton.Text = "Gift"
                            giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                        end)
                    end
                end)
                
                giftButton.MouseEnter:Connect(function()
                    if giftButton.Text == "Gift" then
                        giftButton.BackgroundColor3 = Color3.fromRGB(180, 80, 180)
                    end
                end)
                
                giftButton.MouseLeave:Connect(function()
                    if giftButton.Text == "Gift" then
                        giftButton.BackgroundColor3 = Color3.fromRGB(150, 60, 150)
                    end
                end)
            end
            
            currentX = currentX + columnWidths[j]
        end
    end
    
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #allItemsData * rowHeight)
    
    titleText.Text = "Inventory Items & Prices - " .. #allItemsData .. " Items"
end

for colName, button in pairs(sortButtons) do
    button.MouseButton1Click:Connect(function()
        if currentSortColumn == colName then
            currentSortDir = currentSortDir == "asc" and "desc" or "asc"
        else
            currentSortColumn = colName
            
            if colName == "Weight (kg)" or colName == "Price" or colName == "Variant" or 
               colName == "Mutations" or colName == "Favorited" then
                currentSortDir = "desc"
            else
                currentSortDir = "asc"
            end
        end
        
        createSortedItemList()
    end)
end

refreshButton.MouseButton1Click:Connect(function()
    if not isRefreshing then
        refreshInventoryList()
    end
end)

local function checkGiftFunctionality()
    local found = false
    pcall(function()
        for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
            if remote:IsA("RemoteEvent") and 
              (remote.Name:lower():find("gift") or remote.Name:lower():find("trade")) then
                found = true
                print("Found potential gift remote: " .. remote:GetFullName())
            end
        end
    end)
    
    if not found then
        print("No gift remote found. Gift functionality may not work.")
    end
end

task.spawn(checkGiftFunctionality)

local function setupAutoRefresh()
    spawn(function()
        refreshInventoryList()
        
        while true do
            task.wait(30)
            if not inventoryGui or not inventoryGui.Parent then break end
            if not isMinimized and not isRefreshing then
                pcall(refreshInventoryList)
            end
        end
    end)
end

setupAutoRefresh()
